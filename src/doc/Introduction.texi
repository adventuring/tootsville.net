@c -*- texinfo -*- 

This is the manual for the tootsville server for CIWTA.

@menu
@end menu

@node Who are CIWTA?
@section Who are CIWTA?

CIWTA, The Corporation  for Inter-World Tourism and  Adventuring, is the
non-profit corporation  responsible for  the current development  of the
Romance Ⅱ Game System, particularly,  for the flagship implementation of
it in the form of Tootsville Ⅴ.

For more information about CIWTA, visit the web site at 
@url{https://www.ciwta.org/}


@node What is Tootsville?
@section What is Tootsville?

@cindex Tootsville, what is

Tootsville is a massively-multiplayer online rôle-playing game
(MMORPG) in which players control colorful, elephant-like characters
know as Toots.

Tootsville was  the flagship product  which helped develop  the original
Romance game system into such  a powerful suite. Its commercial sponsor,
Res  Interactive,   LLC,  was  later   shut  down  for   legal  reasons.
The resurrected game  (with the permission of several  of Res's managing
members) is now the flagship for the ongoing development of Romance Ⅱ.

As such, Romance is highly and unapologetically targeted at present
towards the needs of Tootsville.

@node What is the Romance Game System?

@section What is the Romance Game System?

@cindex Romance Game System, what is

Romance is the name of the game system which runs Tootsville, and
which could, in future, be adapted to run other games as well.

The name ``Romance'' has a similar meaning to its usage in ``Romance
Languages,'' i.e. it means made of Romans, not ``romantic.'' The
original software modules of which Romance was made, and into which it
will be subdivided again for purposes of modularity in the 2.0 series,
are each named after a famous Roman.

Romance  has  a  few  technological   goals.  It  is  intended  to  be
comprehensive and flexible enough to  handle a variety of game worlds,
although it necessarily  has deep ties to Tootsville.  Romance also is
based on  a model  in which peer-to-peer  communications are  used for
real  time activities,  while  the central  servers  are reserved  for
persisting the world's state while it is quiescent.

@node Technology Stack

@section Technology Stack

Romance is built up of the following technology stack:

@itemize
@item
The  central REST  servers are  written  in Common  Lisp, compiled  to
a   native  binary,   and  run   as   a  service   under  SystemD   in
a non-privileged user account.
@item
The  client  and peer-to-peer  application  is  written in  JavaScript
(ECMAScript 6 level), and compressed using the Google Closure Compiler
into an optimized and minified form.
@end itemize

@node Affiliated Services

@section Affiliated Services

In the case of Tootsville, several affiliated services are used:

@itemize
@item
Static  web servers  running  Apache serve  up  game assets,  compiled
JavaScript, and other resources.
@item
Apache  servers operate  as load  balancers across  the back-end  game
servers
@item
The Tootsbook blog is a WordPress installation
@item
The central database server is a MariaDB server.
@item
Database references are cached via MemCacheD
@end itemize

@node Clusters

@section Clusters

@cindex Clusters, types of

There are four cluster types for Tootsville.

@table @code

@item local
This refers to running a full Tootsville stack on a developer's workstation

@item test.Tootsville.org
This cluster is used for testing new builds and is the most unstable,
often having a new release pushed to it every week --- sometimes,
several in one day.

@item qa.Tootsville.org
This cluster is used for longer-term testing of the code before rolling it
out to the general public.

@item Tootsville.org
This is the main production environment

@end table

@node Overview of Major Systems

@section Overview of Major Systems

There are several major systems worth understanding from a higher
level. Most of these are documented under specific functions that are
critical in those subsystems.

@subsection Methods of Connecting

@subsubsection REST Requests

@cindex REST interface
@cindex Authentication, REST

REST  calls  can be  anonymous  (or  public), or  require  third-party
authentication, i.e. Firebase credentials.


WRITEME

@subsubsection Infinity Mode communications

@cindex Infinity Mode, Overview
@cindex Authentication, Infinity Mode

In the beginning, Tootsville I, the Hillside Demo, there was SmartFox
Server. This was a chat server designed to work over an XML protocol
with Adobe Flash clients. Tootsville I was built on this SmortFox
Server and the SmartFox client software that went with it.

Unfortunately, SFS was not able to scale up with Tootsville's growth,
and was very resource-intensive on the server side, so Bruce-Robert
Pocock, the Chief Engineer at Res Interactive, brought in a Java-based
chat server that he had written, named Braque. Braque was renamed
Appius Claudius Caecus, and became the first Roman of the Romance Game
System.

In order to convince the SmartFox Client software in the Tootsville
Flosh client program (first Nightmare, and later Persephone) to
communicate with Appius, we had to advertise a SmartFox version number
--- so, in order to ensure that we had a sufficiently high version
number, and since EcmaScript uses floating-point numbers, we chose
Infinity.

The protocol gradually turned into a JSON-oriented library of
functions, leaving behind the SFS protocols (although some SFS
concepts remained, such as room variables and user variables, in
various forms).

The modern version of Infinity Protocol over WebSockets and TCP
streaming is known as version Alef-Null, which is a fascinating maths
concept that refers to a certain kind of Infinity.

There are 3 types of authentication supported for Infinity mode: Adult
Sign-In, Child Sign-In, and Server-to-Server.

Before authenticating, a very limited vocabulary is available; see
@ref{TOOTSVILLE INFINITY-PRE-LOGIN} for a discussion of what is
available to end users. Server-to-server connections send their
authentication in advance.

Once authenticated, the vocabulary grows extensively. See
@ref{TOOTSVILLE DEFINFINITY} for an overview of Infinity Mode commands
and how they can also be called as REST endpoints. Commands begin with
@code{INFINITY-}, and can be found alphabetically in
@ref{Definitions}.

Note that some of these are deprecated or no longer useful, but all
commands since 1.0 are still included in the vocabulary, including
some which were originally Res Interactive proprietary extensions.

See Appendix 6 for an index of Infinity Mode commands.

@node The Adult Sign-In Process

@subsubsection The Adult Sign-in Process

Adults signing in must be first authenticated by an outside
provider. Presently we're using Firebase for that purpose. Long-term,
post-5.0 we'd like to switch to handling pure OAuth on our own, but
migrating from Firebase could be problematic and take some time to
phase in, so we'd prefer to do that before we reach too large a
critical mass of users.

Once the client has performed authentication and received its tokens,
it will send a login packet that is authenticated by @ref{TOOTSVILLE
WEBSOCKET-AUTHENTICATE} and @ref{TOOTSVILLE FIND-USER-FOR-JSON}.

WRITEME

@node The Child Sign-In Process

@subsubsection The Child Sign-in Process

Child sign-ins are conducted using the @ref{TOOTSVILLE
INFINITY-GET-APPLE} function.

WRITEME

@node The Server-to-Server Sign-In Process

@subsubsection The Server-to-Server Sign-In Process

Server-to-Server peering occurs on TCP port 5005, and is accessible
only via the ::1 (loopback) interface. This means that, in order to
create a server-to-server peering, the connection must be tunneled
over ssh first. Since this is an unattended server process, this
requires the use of public/private key pairs to establish trust
between servers.

The server-to-server stream uses JSON packets packaged into a simple
ANSI-control-characters-based streaming protocol.

Sign-in occurs as follows . . . WRITEME

WRITEME

@subsection In-Game Actions


@subsubsection Moving in the Game

@cindex Movement, Overview

There have been 3 systems for character movement.

The  oldest dates  back to  Tootsville I  and was  the @code{d}  method.
This is no  longer in use. For documentation, to  the extent any exists,
refer to Tootsville IV docs. In brief, it allowed a Toot to do basically
the  same  thing  as  the  @code{wtl}  method,  only  it  compacted  the
description into a string joined with @verb{|~|} characters.

The current @emph{status quō} method is the “d₂” method, or ``walk the
line'' (@code{wtl}) method. The basic concept is that each Toot's
position is determined by a linear interpolation along a straight line
described by a start and end position, a speed of movement, and a
start time.  Thus, all clients should be able to reliably place a
character at the same point on the line, regardless of any lag in the
transmission. See @ref{TOOTSVILLE INFINITY-WTL}- for a discussion of
this method.

A more  complex system  being designed  for post-5.0  use is  the ``d₃''
method,  which  allows the  client  to  perform pathfinding  and  create
a Bezier  spline walk pattern. This  system is loosely supported  by the
server but in non-specific ways. 

@subsubsection Speech and Related Things

@cindex Speech, Overview

Speech mostly consists of public messages. Each public message
contains a volume level, speech contents, and musical key (for the
Toot sounds).  @ref{TOOTSVILLE INFINITY-SPEAK} handles the bulk of
speech.

Private messaging is accomplished by  whispering to another player using
@code{@@}  messages —  i.e. the  message begins  with @code{@@}  and the
other  player's name,  and  is  processed by  the  server  as a  special
whisper command.

Operator (Builder Toot) commands begin with a @code{#} and are processed
by the server. See Appendix 7 for an index of operator commands.

Client-side  commands begin  with a  @code{~} and  are processed  by the
client, without ever sending them to the server.

@subsubsection Game Events System (including Store Items)

WRITEME

See @ref{TOOTSVILLE INFINITY-START-EVENT} and @ref{TOOTSVILLE
INFINITY-END-EVENT} for an overview.

@subsubsection Land Ownership

WRITEME

@subsubsection Clothing, Tools, and Equipment

Clothing, Tools, and Equipment are ``just'' items which happen to be
able to be held in a player's inventory. This is largely a function of
the weight assigned and the carrying capacity of the character.

These items feature a Wear Slot value. A Wear Slot indicates a point
on an avatar at which a fiece of clothing can be mounted, or an item
can be held. These slots are distinct to an avatar type, so UltraToot
has different Wear Slots than, say, Jack or Welduh.

Wear Slots have valences that allow multiple layers of clothing to
occupy the same essential slot: eg, a T-shirt under a blazer. Some
articles of clothing may be defined to block other slots or other
valences; eg a full-length dress might block a shirt or pants both.

Items have energy, which can be measured in a continuous or discrete
way. Continuous energy types are effectively a continuum of rational
values, and energy can be expended in any fraction of that
amount. Discrete energy types are an integer counter, and a specefic
count is displayed to the user. When an item's energy reaches zero, it
can vanish, or just remain in inventory awaiting a recharge.

Equipment and tools have special hooks to enable them to be ``used''
in the game world. First, they must be held in the player's trunk (for
avatars with hands, they can be in the left or right hand). Second,
there must be a ``power'' associated with the item, which requires a
client-side function specialized on the item's template ID. This hook
may be a simple wrapper around reporting back to the server, or it can
be as ornate as necessary.

WRITEME

@subsubsection Metronome

The metronome system allows tasks to  occur on a recurring basis without
having  to keep  their own  timing threads  open all  the time.  It also
provides for one-shot events to run at a specific future time.

The  main   point  of   entry  for  scheduling   a  Metronome   task  is
DO-METRONOME.    The    metronome     thread    itself    relies    upon
RUN-METRONOME-TASKS to actually start tasks on each cycle.

Programmers are  strongly encouraged  to schedule tasks  using Metronome
throughout the game code.

@subsection World Simulation

WRITEME

@subsection Server-to-Server Streams

WRITEME

@subsection The front-end

The front-end services of Tootsville are provided by a JavaScript
program, in the repository
@url{https://github.com/adventuring/tootsville.org}.

@subsubsection Coding Standard

In general, the following coding standards apply to the front-end:

@itemize
@item
Everything should be in the global @code{Tootsville}
object-as-namespace.

@item
Within that object, each subsystem has its own object-as-namespace.

@item
Namespaces and classes use CamelCase; functions, variables, and object
property names user lowerCamelCase names.

@item
When defining any object in the global namespace, it must be defined
in such a way that reloading the file is idempotent, and it must not
erase any other members that may have been added into the same
object-as-namespace.

@end itemize

The effects of this is that a typical Javascript source file will
need to contain a series of declarations like this:

@verbatim
if (!('Tootsville' in window))
{ Tootsville = {}; }

if (!('Namespace' in Tootsville))
{ Tootsville.Namespace = {}; }

Tootsville.Namespace.funcName =
 function (lambda, list)
 { ... };

Tootsville.Namespace.object =
 { foo: 42 };
@end verbatim

Note, in particular, that we @emph{must not} do something like:

@verbatim
Tootsville.Namespace =
  { funcName: function () { ... } };
@end verbatim

This would potentially remove other objects in the
@code{Tootsville.Namespace} namespace that may have been defined by
other users.

@subsubsection Babylon.js

The front-end's 3D support is  courtesy of the Babylon.js library, which
has its own on-line documentation.

@subsubsection Gatekeeper

The   Gatekeeper   object   contains    the   bulk   of   the   client's
command processing. Functions  in Gatekeeper are named --  i.e. the keys
in the Gatekeeper  hash table -- for the datagram  @code{from} keys sent
by the server. For example, @code{Tootsville.Game.Gatekeeper.wtl} is the
handler for datagrams with @code{from: "wtl"} in their packet.

WRITEME

@subsubsection Peer-to-Peer Streams (WebRTC)

WRITEME

@subsubsection JSCL

WRITEME

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Back Story

@section Back Story

Once upon a time --- for all  fairy stories begin once upon a time ---
but not  too very long ago,  there were a herd  of elephants wandering
the  plains   of  Africa.  These  elephants   were  just  ``ordinary''
elephants, but of course each of them had their own personality.

...

WRITEME

...

@subsection The Magic Mist and Mist Parrots

The elephants discover the magic mist ... parrots guide them through ...

WRITEME

@subsection The Founding of Tootsville

Discover the fountain ... wish things into being ... 

WRITEME

@subsection The Classical Period

For many years, the Toots expanded their domain across the south and
west of Tootanga.

WRITEME

@subsection The Evil Mayor and Shade

All was well and good, until the arrival of Shade. Shade was a monster
made up of black and purple smoke, with glowing orange eyes, created
from bad wishes --- any wishes that weren't for good. Shade and his
team of Shaddows --- Welduh, Smudge, Nevermind, and others --- arrived
on the scene and started making trouble for the Toots.

Some Toots even joined up with Shade and his Shaddows, and traveled to
the evil valley of Shaddowfalls in the northeastern mountains.

Zap and the others used their power to keep Shade at bay, although
from time to time Shade won small victories, at one time even changing
all of Tootsville into Shadesville for a couple of weeks.

To fight the ongoing perils of Shade, the Toot Troops were organized,
a scouting-type organization that kept the Shaddows on notice.

Then, Shade came up with his greatest plan --- he replaced the mayor
of Tootsville with the evil mayor, a hollow Toot full of smoke and
stuffed with straw. The evil mayor helped Shade get into the
underground Troops bunker and disconnect the water leading to the Toot
Square Fountain. Smudge went around and poisoned all of the other
wishing fountains, leaving the Toots without any source of Wish
Magic. Ogres took control of the Enchanted Forest and kept the Toot
Fairies from bringing in any Fairy Dust.

@subsection The Destruction of Tootsville

Things were bleak. Tootsville fell, and the Toots one by one
disappeared, leaving behind nothing but a field of purple volcanic
dust and Shade.

@subsection The Revival

Not everyone was destroyed. Pil, the most powerful Toot of all,
protected some of the other Toots from Shade. Codfish-Howie and
Catvlle got together and revived the original 8 Toots, then more and
more. They trapped Shade in a forcefield of his own evil magic in
Shaddowfalls, and began to rebuild Tootsville, starting with the
iconic Toot Square Fountain.

That brings us to today.

