(defclass robo-Toot (robot) ())

(defmethod robo-Toot-handle (robo-Toot from status message))

(defmethod robo-Toot-listen (robo-Toot listener speaker text extra-class)
  (let* ((heard (robo-Toot-heard robo-Toot))
         (heard-from-speaker (if heard
                                 (gethash speaker heard (list))
                                 (list)))
         (mode (robo-Toot-mode robo-Toot))
         (mode-for-speaker (if mode
                               (gethash speaker mode nil)
                               nil)))
    (appendf heard-from-speaker text)
    (when (> (length heard-from-speaker) 10)
      (setf heard-from-speaker (subseq heard-from-speaker 1)))
    (setf (gethash speaker heard) heard-from-speaker)
    (robo-Toot-heard robo-Toot listener speaker mode-for-speaker heard-from-speaker)))

(defmethod robot-unicast (robo-Toot message)
  (destructuring-bind (&key |from| |status| &allow-other-keys) message
    (robo-Toot-handle robo-Toot (make-keyword |from|) |status| message)))

(defmethod robo-Toot-handle (robo-Toot (from (eql :|logOK|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|avatars|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|bots|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|passport|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|startEvent|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|scoreUpdate|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|endEvent|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|gameAction|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|beam|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|earning|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|getAwardRankings|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|getApple|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|login|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|parentApproval|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|getStoreItems|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|pub|)) status message)
  (destructuring-bind (&key |t| |u| |x| |id| &allow-other-keys) message
    (let ((speaker (find-record 'Toot :uuid |id|)))
      (robo-Toot-listen robo-Toot (make-keyword (string-upcase (Toot-name (Toot robo-Toot))))
                        speaker |t| |x|))))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|purchase|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|inventory|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|ping|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|getColorPalettes|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|wardrobe|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|initUserRoom|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|getAvailableHouses|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|getMailInBox|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|getMailMessage|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|sendMailMessage|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|postman|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|getUserLists|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|buddyList|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|buddyRequest|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|outOfBand|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|admin|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|serverTime|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|badgeUpdate|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|forceMove|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|reportBug|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|tootList|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|playWith|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|newScript|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|joinOK|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|wtl|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|bye|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|goToWeb|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|c|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|ayt|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|rv|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|prompt|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|quiesce|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|kick|)) status message))
(defmethod robo-Toot-handle (robo-Toot (from (eql :|burgeon|)) status message))

(defclass robo-Toot-context ()
  ((heard :initform (make-hash-table :key 'equalp) :accessor robo-Toot-heard)))

(defmethod initialize-robo-Toot (robot)
  (let* ((quiesced (find-record 'Toot-quiesced :Toot (Toot-uuid (Toot robot))))
         (wtl (or (and quiesced (Toot-quiesced-wtl quiesced))
                  (random-start-wtl-for-Toot))))
    (setf (context robot) (make-instance 'robo-Toot-context)
          (Toot-position robot) (destructuring-bind (&key |course| |facing|) wtl
                                  (let ((start-point (getf |course| :|startPoint|)))
                                    (destructuring-bind (&key |x| |y| |z|)
                                        (list :chor |x| |y| |z|))))))
  t)

(defmethod robo-Toot-say (robot format &rest format-args)
  (broadcast (list :|from| (Toot-name (Toot robot))
                   :|id| (UUID (Toot robot))
                   :|t| (apply #'format nil format format-args)
                   :|x| (list))
             (Toot-position robot)
             robot))
